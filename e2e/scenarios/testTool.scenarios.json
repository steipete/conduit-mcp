{
  "scenarios": [
    {
      "name": "echo_simple_string",
      "description": "Test echo operation with a simple string parameter",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo",
          "params_to_echo": "Hello, World!"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success",
          "echoed_params": "Hello, World!"
        }
      },
      "should_show_notice": true,
      "notice_code": "DEFAULT_PATHS_USED"
    },
    {
      "name": "echo_complex_object",
      "description": "Test echo operation with a complex object parameter",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo",
          "params_to_echo": {
            "nested": {
              "value": 42,
              "array": [1, 2, 3],
              "boolean": true
            },
            "string": "test"
          }
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success",
          "echoed_params": {
            "nested": {
              "value": 42,
              "array": [1, 2, 3],
              "boolean": true
            },
            "string": "test"
          }
        }
      },
      "should_show_notice": true,
      "notice_code": "DEFAULT_PATHS_USED"
    },
    {
      "name": "echo_null_value",
      "description": "Test echo operation with null parameter",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo",
          "params_to_echo": null
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success",
          "echoed_params": null
        }
      },
      "should_show_notice": true,
      "notice_code": "DEFAULT_PATHS_USED"
    },
    {
      "name": "echo_empty_array",
      "description": "Test echo operation with empty array parameter",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo",
          "params_to_echo": []
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success",
          "echoed_params": []
        }
      },
      "should_show_notice": true,
      "notice_code": "DEFAULT_PATHS_USED"
    },
    {
      "name": "generate_error_known_code",
      "description": "Test error generation with a known error code",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "generate_error",
          "error_code_to_generate": "ERR_FS_FILE_NOT_FOUND",
          "error_message_to_generate": "Test file not found error"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "ERR_FS_FILE_NOT_FOUND",
        "error_message": "Test file not found error"
      },
      "should_show_notice": false
    },
    {
      "name": "generate_error_unknown_code",
      "description": "Test error generation with an unknown error code",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "generate_error",
          "error_code_to_generate": "CUSTOM_TEST_ERROR",
          "error_message_to_generate": "Custom test error message"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "CUSTOM_TEST_ERROR",
        "error_message": "Custom test error message"
      },
      "should_show_notice": false
    },
    {
      "name": "unsupported_operation",
      "description": "Test handling of unsupported operation",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "invalid_operation",
          "some_param": "value"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "ERR_UNSUPPORTED_OPERATION",
        "error_message": "Unsupported test operation: invalid_operation"
      },
      "should_show_notice": false
    },
    {
      "name": "echo_no_notice_with_allowed_paths",
      "description": "Test echo operation without notice when CONDUIT_ALLOWED_PATHS is set",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo",
          "params_to_echo": "No notice test"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success",
          "echoed_params": "No notice test"
        }
      },
      "should_show_notice": false,
      "env_vars": {
        "CONDUIT_ALLOWED_PATHS": "/tmp"
      }
    },
    {
      "name": "echo_long_string",
      "description": "Test echo operation with a long string parameter (1KB).",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo",
          "params_to_echo": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success",
          "echoed_params": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        }
      },
      "should_show_notice": true,
      "notice_code": "DEFAULT_PATHS_USED"
    },
    {
      "name": "echo_special_chars_string",
      "description": "Test echo operation with a string containing special characters.",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo",
          "params_to_echo": "\"'\\n\\t你好世界"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success",
          "echoed_params": "\"'\\n\\t你好世界"
        }
      },
      "should_show_notice": true,
      "notice_code": "DEFAULT_PATHS_USED"
    },
    {
      "name": "echo_deeply_nested_object",
      "description": "Test echo operation with a deeply nested object (5 levels).",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo",
          "params_to_echo": {
            "level1": {
              "level2": {
                "level3": {
                  "level4": {
                    "level5": "deep value"
                  }
                }
              }
            }
          }
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success",
          "echoed_params": {
            "level1": {
              "level2": {
                "level3": {
                  "level4": {
                    "level5": "deep value"
                  }
                }
              }
            }
          }
        }
      },
      "should_show_notice": true,
      "notice_code": "DEFAULT_PATHS_USED"
    },
    {
      "name": "echo_missing_params_to_echo",
      "description": "Test echo operation when params_to_echo field is missing.",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "echo"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "tool_name": "test",
        "results": {
          "status": "success"
        }
      },
      "should_show_notice": true,
      "notice_code": "DEFAULT_PATHS_USED"
    },
    {
      "name": "generate_error_known_code_no_message",
      "description": "Test error generation with a known error code and no custom message.",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "generate_error",
          "error_code_to_generate": "ERR_INVALID_PARAMETER"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "ERR_INVALID_PARAMETER"
      },
      "should_show_notice": false
    },
    {
      "name": "generate_error_empty_code",
      "description": "Test error generation with an empty error code.",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "generate_error",
          "error_code_to_generate": "",
          "error_message_to_generate": "Error with empty code"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "",
        "error_message": "Error with empty code"
      },
      "should_show_notice": false,
      "env_vars": {
        "CONDUIT_ALLOWED_PATHS": "/tmp"
      }
    },
    {
      "name": "generate_error_empty_message",
      "description": "Test error generation with a known error code and an empty message.",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": "generate_error",
          "error_code_to_generate": "ERR_UNKNOWN",
          "error_message_to_generate": ""
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "ERR_UNKNOWN",
        "error_message": ""
      },
      "should_show_notice": false
    },
    {
      "name": "invalid_request_missing_operation",
      "description": "Test request with missing operation field.",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "some_other_param": "value"
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "ERR_UNSUPPORTED_OPERATION",
        "error_message": "Unsupported test operation: undefined"
      },
      "should_show_notice": false
    },
    {
      "name": "invalid_request_null_operation",
      "description": "Test request with null operation field.",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": null
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "ERR_UNSUPPORTED_OPERATION",
        "error_message": "Unsupported test operation: null"
      },
      "should_show_notice": false
    },
    {
      "name": "invalid_request_empty_operation",
      "description": "Test request with empty string operation field.",
      "request_payload": {
        "tool_name": "test",
        "params": {
          "operation": ""
        }
      },
      "expected_exit_code": 0,
      "expected_stdout": {
        "status": "error",
        "error_code": "ERR_UNSUPPORTED_OPERATION",
        "error_message": "Unsupported test operation: "
      },
      "should_show_notice": false
    }
  ]
}
